(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{496:function(t,a,s){"use strict";s.r(a);var e=s(54),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"kotlin-introduction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-introduction"}},[t._v("#")]),t._v(" Kotlin Introduction")]),t._v(" "),s("h2",{attrs:{id:"creating-a-kotlin-project-with-intellij"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-kotlin-project-with-intellij"}},[t._v("#")]),t._v(" Creating a Kotlin Project with IntelliJ")]),t._v(" "),s("p",[t._v("The video below demonstrates Creating a Kotlin Project using IntelliJ IDEA:")]),t._v(" "),s("YouTube",{attrs:{title:"create a kotline project with intellij",url:"https://www.youtube.com/embed/r_tD_787Hl4"}}),t._v(" "),s("h2",{attrs:{id:"adding-a-kotlin-source-file-and-simple-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adding-a-kotlin-source-file-and-simple-code"}},[t._v("#")]),t._v(" Adding a Kotlin source file and simple code")]),t._v(" "),s("p",[t._v("Once you have a new project you need to add source code.")]),t._v(" "),s("p",[t._v("The video below demonstrates how to add a source code file for a simple Kotlin application:")]),t._v(" "),s("YouTube",{attrs:{title:"add a source code file for a Kotlin app",url:"https://www.youtube.com/embed/lGVmNSzI-PI"}}),t._v(" "),s("h2",{attrs:{id:"kotlin-intro"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-intro"}},[t._v("#")]),t._v(" Kotlin Intro")]),t._v(" "),s("p",[t._v("Kotlin is a cross-platform, statically typed, general-purpose programming language, that supports both OOP and functional design.")]),t._v(" "),s("p",[t._v("Kotlin is designed to interoperate fully with Java and the JVM.")]),t._v(" "),s("p",[t._v("Kotlin is more concise than Java reducing the amount of boilerplate code that you have write.")]),t._v(" "),s("p",[t._v("Kotlin is explicit which means it will only perform instructions if you directly tell it to do so. For example, unlike Java, you cannot explicitly assign an Int to a Long. Instead you need to use a conversion method that is included with all the numeric data types")]),t._v(" "),s("p",[t._v("Kotlin is safer than Java as it avoids NullPointerExceptions due to its support of nullability as part of its data type structure.")]),t._v(" "),s("p",[s("strong",[t._v("Note")]),t._v(": Every variable in Kotlin is not-null by default")]),t._v(" "),s("p",[t._v("The Kotlin programming language is both free and open source.")]),t._v(" "),s("p",[t._v("It's available under the Apache 2 license and the project is hosted on Github:")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/JetBrains/kotlin",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/JetBrains/kotlin"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"commenting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commenting"}},[t._v("#")]),t._v(" Commenting")]),t._v(" "),s("p",[t._v("Kotlin supports two standard styles of commenting similar to other languages like C#, C++ and Java")]),t._v(" "),s("p",[t._v("Single Line Comment:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// single line comment")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Multi-line Comment:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n    This is a multi-line comment.\n    It can contain multiple lines.\n*/")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"data-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[t._v("#")]),t._v(" Data Types:")]),t._v(" "),s("p",[t._v("Numeric data types in Kotlin are very similar to Java.")]),t._v(" "),s("h4",{attrs:{id:"integers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#integers"}},[t._v("#")]),t._v(" Integers:")]),t._v(" "),s("p",[t._v("Kotlin supports 8, 16, 32 and 64 bit integers (Byte, Short, Int and Long):")]),t._v(" "),s("ul",[s("li",[t._v("Byte - 8 bit")]),t._v(" "),s("li",[t._v("Short- 16 bit")]),t._v(" "),s("li",[t._v("Int - 32 bit")]),t._v(" "),s("li",[t._v("Long - 64 bit")])]),t._v(" "),s("blockquote",[s("p",[t._v("Note: All integers in Kotlin are signed")])]),t._v(" "),s("h4",{attrs:{id:"floating-point-decimal-numbers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#floating-point-decimal-numbers"}},[t._v("#")]),t._v(" Floating Point (decimal) numbers:")]),t._v(" "),s("ul",[s("li",[t._v("Float - 32 bit single-precision")]),t._v(" "),s("li",[t._v("Double - 64 bit double-precision")])]),t._v(" "),s("h4",{attrs:{id:"boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean:")]),t._v(" "),s("p",[t._v("The type Boolean in Kotlin is the same as the Java Boolean and is used to represent true or false logical values.")]),t._v(" "),s("h4",{attrs:{id:"char"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#char"}},[t._v("#")]),t._v(" Char:")]),t._v(" "),s("p",[t._v("Characters are represented with the type "),s("code",[t._v("Char")]),t._v(".")]),t._v(" "),s("p",[t._v("In Kotlin (unlike Java) "),s("code",[t._v("Char")]),t._v(" types cannot be treated as numbers.")]),t._v(" "),s("p",[s("code",[t._v("Char")]),t._v(" types are declared using single quotes.")]),t._v(" "),s("h4",{attrs:{id:"strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[t._v("#")]),t._v(" Strings:")]),t._v(" "),s("p",[s("code",[t._v("Strings")]),t._v(" are immutable and are represented using the String class.")]),t._v(" "),s("blockquote",[s("p",[t._v("Note: All data types in Kotlin also have the standard conversion to String helper function:")])]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"kotlin-naming-convention"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-naming-convention"}},[t._v("#")]),t._v(" Kotlin Naming Convention")]),t._v(" "),s("p",[t._v("Kotlin follows standard Java naming conventions:")]),t._v(" "),s("p",[t._v("Names of packages are lower case and do not use underscores")]),t._v(" "),s("p",[t._v("Names of classes and objects start with an upper case letter and use camelCase")]),t._v(" "),s("p",[t._v("Names of functions, properties and local variables start with a lower case letter and use camelCase with no underscores")]),t._v(" "),s("p",[t._v("Names of constants should use uppercase underscore_separated names")]),t._v(" "),s("p",[t._v("The official list of Kotlin coding conventions:")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://kotlinlang.org/docs/reference/coding-conventions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://kotlinlang.org/docs/reference/coding-conventions.html"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"creating-variables-in-kotlin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-variables-in-kotlin"}},[t._v("#")]),t._v(" Creating Variables in Kotlin")]),t._v(" "),s("p",[t._v("Kotlin variables can be mutable or immutable.")]),t._v(" "),s("p",[t._v("Variables are declared using two keywords: "),s("code",[t._v("val")]),t._v(" (immutable) or "),s("code",[t._v("var")]),t._v(" (mutable).")]),t._v(" "),s("p",[t._v("When using Kotlin immutable values ​​are preferred when possible.")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// creates a mutable Int variable called x which contains 42")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tony"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// creates an immutable variable called name which contains "Tony"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("Note how the variable name comes before the data type in Kotlin.")]),t._v(" "),s("p",[t._v("First you declare the variable using val or var then a space and then the variable name, this is followed by a colon, then a space then finally the data type.")]),t._v(" "),s("p",[t._v("Kotlin utilizes type inference and prefers that you don't specify the type of variable you are declaring, as long as the compiler can infer it.")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// creates a mutable Integer variable called x which contains 42, the type is inferred to be Int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tony"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// creates an immutable variable called name which contains "Tony"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("Note that the code above doesn't contain any semicolons as Kotlin does not require semicolons.")]),t._v(" "),s("h3",{attrs:{id:"pairs-and-more"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pairs-and-more"}},[t._v("#")]),t._v(" Pairs and More")]),t._v(" "),s("p",[t._v("Watch the following video to learn about Kotlin Pairs and Triples:")]),t._v(" "),s("YouTube",{attrs:{title:"pairs and triples",url:"https://www.youtube.com/embed/n2C0h2kidbo"}}),t._v(" "),s("h3",{attrs:{id:"ranges"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ranges"}},[t._v("#")]),t._v(" Ranges")]),t._v(" "),s("p",[t._v("Watch the following video to learn about Kotlin ranges:")]),t._v(" "),s("YouTube",{attrs:{title:"ranges",url:"https://www.youtube.com/embed/IYw0LTFcbWY"}}),t._v(" "),s("h3",{attrs:{id:"loops"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loops"}},[t._v("#")]),t._v(" Loops")]),t._v(" "),s("p",[t._v("Watch the following video's to learn about Kotlin loops:")]),t._v(" "),s("p",[t._v("The while and do-while loops:")]),t._v(" "),s("YouTube",{attrs:{title:"while and do-while",url:"https://www.youtube.com/embed/fCHQVF9QGx4"}}),t._v(" "),s("p",[t._v("The for loop:")]),t._v(" "),s("YouTube",{attrs:{title:"for loop",url:"https://www.youtube.com/embed/1Lfkr4j56MY"}}),t._v(" "),s("h3",{attrs:{id:"when-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-statement"}},[t._v("#")]),t._v(" When statement")]),t._v(" "),s("p",[t._v("Kotlin does not have a switch statement, instead it uses a newer construct that is very powerful, the when statement.")]),t._v(" "),s("p",[t._v("Watch the following video to learn about the Kotlin when statement:")]),t._v(" "),s("YouTube",{attrs:{title:"when statement",url:"https://www.youtube.com/embed/ZHBhj7HtmBg"}}),t._v(" "),s("h3",{attrs:{id:"functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),s("p",[t._v("How to define a function in Kotlin:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("output")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function body")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("When defining a function in Kotlin, you use the fun keyword, followed by the name of the function.")]),t._v(" "),s("p",[t._v("Note that the function above code does not have any arguments.")]),t._v(" "),s("p",[t._v("Also note, the function above does not specify any return type, therefore the return type is Unit.")]),t._v(" "),s("p",[t._v("This function takes a String as an argument and does not specify any return type:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("output")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function body")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("This function takes a String as an argument and returns a Boolean:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("output")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function body")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("Watch the following video to learn more about Kotlin functions:")]),t._v(" "),s("YouTube",{attrs:{title:"functions in Kotlin",url:"https://www.youtube.com/embed/u0jhfaIG-b0"}}),t._v(" "),s("h3",{attrs:{id:"additional-function-features"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#additional-function-features"}},[t._v("#")]),t._v(" Additional Function Features")]),t._v(" "),s("p",[t._v("In this section you will learn about varargs, spread, local functions, function shorthand and complex function returns,")]),t._v(" "),s("p",[t._v("Watch this video to learn more about these Kotlin features:")]),t._v(" "),s("YouTube",{attrs:{title:"function features",url:"https://www.youtube.com/embed/nqAtIEBxEBA"}}),t._v(" "),s("h3",{attrs:{id:"arrays"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[t._v("#")]),t._v(" Arrays")]),t._v(" "),s("p",[t._v("The Array is the most basic Kotlin collection type and supports the following features:")]),t._v(" "),s("ul",[s("li",[t._v("Array stores objects of the same type and its sized is fixed")]),t._v(" "),s("li",[t._v("Standard array indexing is used to identify a position in an array")]),t._v(" "),s("li",[t._v("The first element is zero")]),t._v(" "),s("li",[t._v("The last element index is equal to the array’s size minus one")]),t._v(" "),s("li",[t._v("The array size is immutable")]),t._v(" "),s("li",[t._v("The array elements are mutable")])]),t._v(" "),s("p",[t._v("To create an array call "),s("code",[t._v("arrayOf(passed-values)")]),t._v(".")]),t._v(" "),s("p",[t._v("The Kotlin compiler knows what type of array it is creating based on the type of the values passed.")]),t._v(" "),s("p",[t._v("The following code creates an array of integers with six elements:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" arrayOfIntegers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("arrayOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("There several ways to iterate through an array:")]),t._v(" "),s("p",[t._v("Using a for loop:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" arrayOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("Using the built-in array forEach method:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("arrayOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Use array indexing to change element values:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("arrayOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("Note")]),t._v(": If you try to access an element with an index that is larger than the last index (out of bounds), or use a negative index, an ArrayIndexOutOfBoundsException will be thrown.")]),t._v(" "),s("p",[t._v("You can use array.size to determine the size of an array and "),s("code",[t._v("array.lastIndex")]),t._v(" to get the value of the last index (size - 1).")]),t._v(" "),s("p",[t._v("Watch this video to see how to use arrays in Kotlin:")]),t._v(" "),s("YouTube",{attrs:{title:"arrays in kotlin",url:"https://www.youtube.com/embed/rzSJcBbpv_o"}}),t._v(" "),s("h3",{attrs:{id:"where-s-my-void"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#where-s-my-void"}},[t._v("#")]),t._v(" Where's My Void")]),t._v(" "),s("p",[t._v("Having trouble finding void?")]),t._v(" "),s("p",[t._v("In Kotlin everything is an object so there is no void.")]),t._v(" "),s("p",[t._v("Void has been replaced with the Unit object.")]),t._v(" "),s("p",[t._v("The Unit object represents an empty value.")]),t._v(" "),s("p",[t._v("The usage is similar to void therefore the Unit keyword can usually be omitted as it is not required.")]),t._v(" "),s("p",[t._v("Note that "),s("strong",[t._v("ALL functions in Kotlin return a value")]),t._v(", therefore a Kotlin function that has no return type will return the object Unit")]),t._v(" "),s("h3",{attrs:{id:"string-literals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-literals"}},[t._v("#")]),t._v(" String Literals")]),t._v(" "),s("p",[t._v("Kotlin has two types of string literals:")]),t._v(" "),s("p",[s("strong",[t._v("Escaped String")]),t._v(":")]),t._v(" "),s("p",[t._v("The escaped string is the same as a java string.\nLike Strings in many languages this type of String can contain escape characters which start with a backslash:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “\\t\\tCheddar Cheese\\n”\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("Raw String")]),t._v(":")]),t._v(" "),s("p",[t._v("Raw strings can contain newlines (span multiple lines) and text.")]),t._v(" "),s("p",[t._v('Raw strings (also called long Strings) are created using triple quotes ("""), they ignore escape characters, treating them as regular text:')]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('""" Here is an example\n               of a multi-line String.\n               This can be very useful!\n           """')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"nullable-types-in-kotlin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nullable-types-in-kotlin"}},[t._v("#")]),t._v(" Nullable Types in Kotlin")]),t._v(" "),s("p",[t._v("Kotlin supports "),s("code",[t._v("nullability")]),t._v(" with its data types.")]),t._v(" "),s("p",[t._v("When creating a Kotlin variable you declare whether a variable can hold a null value or not.")]),t._v(" "),s("p",[t._v("This has the advantage of allowing the compiler to detect possible "),s("code",[t._v("NullPointerException")]),t._v(" errors at compile time, which reduces the occurrence of these errors at run time.")]),t._v(" "),s("p",[t._v("All variables in Kotlin are non-nullable by default.")]),t._v(" "),s("p",[t._v("If you attempt to assign a null value to a standard Kotlin variable the compiler will throw an error:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cheddar"')]),t._v("\ncheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This produces a compilation Error")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("To support null values in variables Kotlin requires you to declare them as nullable (they are allowed to contain null) when they are created.")]),t._v(" "),s("p",[t._v("This is accomplished by simply appending a question mark to the type declaration:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nullableCheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cheddar"')]),t._v("\nnullableCheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this is allowed because nullableCheese is allowed to contain null")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("code",[t._v("NullPointerException")]),t._v(" errors commonly occur when trying to access a property or call a method on a variable which is set to null.")]),t._v(" "),s("p",[t._v("Kotlin prevents property access and method calls on nullable variables and preventing many NullPointerExceptions errors.")]),t._v(" "),s("p",[t._v("The following code is allowed because Kotlin knows that the variable cheese can never be null:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cheese"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" uppercaseCheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cheese"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("However the same code fails when using a nullable variable:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cheddar"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nullableCheese"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This produces a compilation Error")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" uppercaseCheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nullableCheese"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Another compilation Error")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("The Kotlin compiler knows, at compile time, which variables can contain null. This allows Kotlin to detect and prevent statements that may result in a "),s("code",[t._v("NullPointerException")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("Not null assertion : !! Operator")])]),t._v(" "),s("p",[t._v("The not null assertion operator !! first converts a nullable type into a non-null type and then throws a "),s("code",[t._v("NullPointerException")]),t._v(" if the nullable type contains a null value:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\ncheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Throws a NullPointerException")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("::: Warning\nAs the not null assertion operator circumvents the "),s("code",[t._v("nullability")]),t._v(" technology built into Kotlin, it should only be used when absolutely necessary.\n:::")]),t._v(" "),s("p",[t._v("Watch this video to see how to use nullable types Kotlin:")]),t._v(" "),s("YouTube",{attrs:{title:"nullable types",url:"https://www.youtube.com/embed/OPJPyjfsU8M"}}),t._v(" "),s("h3",{attrs:{id:"working-with-nullable-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#working-with-nullable-types"}},[t._v("#")]),t._v(" Working with Nullable Types")]),t._v(" "),s("p",[t._v("There are several ways to safely work with "),s("code",[t._v("nullable")]),t._v(" types in Kotlin")]),t._v(" "),s("p",[t._v("Using a traditional null check:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Swiss"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cheese"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Your cheese is null!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("strong",[t._v("Note")]),t._v(": The compiler knows that the null check has been performed and allows subsequent calls (such as "),s("code",[t._v("toUpperCase()")]),t._v(") in the if branch of the condition statement.")]),t._v(" "),s("p",[s("strong",[t._v("Safe call operator: ?.")])]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("null")]),t._v(" comparison as shown above is simple but requires extra code (the condition statement)")]),t._v(" "),s("p",[t._v("To simplify this code Kotlin provides the Safe call operator ?.")]),t._v(" "),s("p",[t._v("The Safe call operator allows for more concise code by combining both the null-check and a method call into a single expression:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("The statement above is equivalent to:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cheese"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("To safely output to the console the String variable cheese in uppercase and also its length:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("The code above will output null for both statements as that is the value of the cheese String variable")]),t._v(" "),s("p",[t._v("console output:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("null\nnull\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("You can also create code that only executes an operation if the variable is not null, by using both the Safe call operator with the let extension function:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\ncheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("The expression inside the let function will only execute only if the variable cheese is not null.")]),t._v(" "),s("p",[t._v("console output:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("nothing is output")]),t._v(" "),s("p",[t._v("Safe operator calls can be chained to simplify code:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" studentEmail"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("In this code the variable studentEmail will be "),s("code",[t._v("null")]),t._v(" if either number, name or email are "),s("code",[t._v("null")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("The Elvis operator: ?:")])]),t._v(" "),s("p",[t._v("The Elvis operator "),s("code",[t._v("?:")]),t._v(" is similar to the Safe call operator with an additional feature, it provides a default value when the variable is null.")]),t._v(" "),s("p",[t._v("The Elvis operator takes two values, it returns the first value if the variable is not null, else, it returns the second value:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" myCheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cheddar"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("The code above is equivalent to:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('val myCheese = if(cheese != null) cheese else "Cheddar"\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("Note")]),t._v(": Even when using shorthand in Kotlin (above) the Elvis operator provides a less verbose option")]),t._v(" "),s("p",[t._v("The Elvis operator can be used with Safe call operator to provide a default value:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cheese"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" studentEmail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No Email Address"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("The Elvis operator can also be used to throw an exception:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" myCheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cheese "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IllegalArgumentException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Your cheese cannot be null"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"data-type-conversion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-type-conversion"}},[t._v("#")]),t._v(" Data Type Conversion")]),t._v(" "),s("p",[t._v("Kotlin (unlike Java) does not support implicit conversion from smaller data types to larger data types.")]),t._v(" "),s("p",[t._v("For example, you cannot assign an Int to a Long or a Double")]),t._v(" "),s("p",[t._v("In addition to the standard toString() helper function all Kotlin numeric data types have conversion helper functions that are used to convert from one data type to another:")]),t._v(" "),s("ul",[s("li",[t._v("toByte()")]),t._v(" "),s("li",[t._v("toShort()")]),t._v(" "),s("li",[t._v("toInt()")]),t._v(" "),s("li",[t._v("toLong()")]),t._v(" "),s("li",[t._v("toFLoat()")]),t._v(" "),s("li",[t._v("toDouble()")]),t._v(" "),s("li",[t._v("toChar()")])]),t._v(" "),s("h3",{attrs:{id:"type-alias"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-alias"}},[t._v("#")]),t._v(" Type Alias")]),t._v(" "),s("p",[t._v("Type aliases provide alternative names for existing types:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" bool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Boolean\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("You can then use your alias in your code:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("bool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("Note that type aliases can also provide aliases for function types.")]),t._v(" "),s("h3",{attrs:{id:"kotlin-collections"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-collections"}},[t._v("#")]),t._v(" Kotlin Collections")]),t._v(" "),s("h4",{attrs:{id:"arrays-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arrays-2"}},[t._v("#")]),t._v(" Arrays")]),t._v(" "),s("p",[t._v("The Array is the most basic Kotlin collection type and supports the following features:")]),t._v(" "),s("ul",[s("li",[t._v("Array stores objects of the same type and its sized is fixed")]),t._v(" "),s("li",[t._v("Standard array indexing is used to identify a position in an array")]),t._v(" "),s("li",[t._v("The first element is zero")]),t._v(" "),s("li",[t._v("The last element index is equal to the array’s size minus one")]),t._v(" "),s("li",[t._v("The array size is immutable")]),t._v(" "),s("li",[t._v("The array elements are mutable")])]),t._v(" "),s("p",[t._v("To create an array call "),s("code",[t._v("arrayOf(passed-values)")]),t._v(".")]),t._v(" "),s("p",[t._v("The Kotlin compiler knows what type of array it is creating based on the type of the values passed.")]),t._v(" "),s("p",[t._v("The following code creates an array of integers with six elements:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" arrayOfIntegers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("arrayOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("There several ways to iterate through an array:")]),t._v(" "),s("p",[t._v("Using a for loop:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" arrayOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("Using the built-in array forEach method:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("arrayOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Use array indexing to change element values:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("arrayOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("Note")]),t._v(": If you try to access an element with an index that is larger than the last index (out of bounds), or use a negative index, an "),s("code",[t._v("ArrayIndexOutOfBoundsException")]),t._v(" will be thrown.")]),t._v(" "),s("p",[t._v("You can use array.size to determine the size of an array and "),s("code",[t._v("array.lastIndex")]),t._v(" to get the value of the last index (size - 1).")]),t._v(" "),s("h4",{attrs:{id:"lists"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lists"}},[t._v("#")]),t._v(" Lists")]),t._v(" "),s("p",[t._v("Lists are dynamic arrays.")]),t._v(" "),s("p",[t._v("List collections are available in two different versions: mutable and immutable, therefore:")]),t._v(" "),s("p",[t._v("Lists can have either a mutable or immutable size\nLists can have either mutable or immutable elements")]),t._v(" "),s("p",[t._v("Creating immutable Lists:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" listOfIntegers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("Note")]),t._v(": You cannot change element values in an immutable List:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("listOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this will cause an error!")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Creating mutable lists:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" listOfIntegers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutableListOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Mutable Lists are dynamic as they allow adding, removing and inserting elements.")]),t._v(" "),s("p",[t._v("Mutable Lists allow for element content to change:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" listOfIntegers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutableListOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlistOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// changes the element value")]),t._v("\nlistOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// removes the element")]),t._v("\nlistOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// insert at index 2")]),t._v("\nlistOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// removes the element with the value 13")]),t._v("\nlistOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nlistOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("strong",[t._v("Note")]),t._v(": In the code above you can see that List collections allow duplicate values. If you wish for all the values in a List to be unique you should use a Set collection.")]),t._v(" "),s("h4",{attrs:{id:"sets"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sets"}},[t._v("#")]),t._v(" Sets")]),t._v(" "),s("p",[t._v("Sets are a variation of the List collection where each of the elements is unique. They are commonly used when duplicate values are not allowed, for example a Set of student numbers.")]),t._v(" "),s("p",[t._v("Sets can have either a mutable or immutable size\nSets can have either mutable or immutable elements\nDuplicate elements (values) are not allowed")]),t._v(" "),s("p",[t._v("Creating immutable Sets:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" setOfIntegers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("Note")]),t._v(": You cannot change element values in an immutable Set:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("setOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this will cause an error!")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Creating mutable Sets:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" setOfIntegers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutableSetOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Mutable Sets are dynamic as they allow adding, removing and inserting elements.")]),t._v(" "),s("p",[t._v("Note: Sets use the hashCode() method internally to filter out duplicates. If the Set is mutable adding a duplicate element to it replaces the original item with the new one.")]),t._v(" "),s("p",[t._v("Note: The hashCode() method can be overridden to change the default behaviour.")]),t._v(" "),s("p",[t._v("Note: A Set is an unordered collection: Sets do not have indexes (indices), because all values are unique.")]),t._v(" "),s("p",[t._v("When using Sets it does not matter what order is used to insert values:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("setOfIntegers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this removes the element that contains the number 10")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h4",{attrs:{id:"maps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maps"}},[t._v("#")]),t._v(" Maps")]),t._v(" "),s("p",[t._v("Maps care collections of key/value pairs (two objects) where each key is unique.")]),t._v(" "),s("p",[t._v("Sets can have either a mutable or immutable size\nSets can have either mutable or immutable elements\nEach key/value pair can be of any type")]),t._v(" "),s("p",[t._v("Creating immutable Maps:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" mapOfData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"email"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pat@here.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1234"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("Creating mutable Maps:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" mapOfData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutableMapOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pat Student"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"email"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pat@college.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1234"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("Modifying mutable Maps:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("mapOfData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"grade"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// using put method")]),t._v("\n\nmapOfData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"grade"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A+"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// using array indexing")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("Iterating through Maps:")]),t._v(" "),s("div",{staticClass:"language-kt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("mapOfData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Key: '),s("span",{pre:!0,attrs:{class:"token interpolation variable"}},[t._v("$key")]),t._v(" Value: "),s("span",{pre:!0,attrs:{class:"token interpolation variable"}},[t._v("$value")]),t._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])],1)}),[],!1,null,null,null);a.default=n.exports}}]);